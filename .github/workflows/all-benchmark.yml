---
name: Nightly Benchmarks

permissions:
  contents: read

on:
  schedule:
    # Run every day at 00:00
    - cron: "0 0 * * *"

  workflow_dispatch:
    inputs:
      workloads:
        description: 'Workloads to run (comma separated)'
        required: true
        type: string
        default: pmc
      workload_params:
        description: 'Overwrite workload parameters (JSON)'
        required: true
        type: string
        default: '{}'
      cluster_types:
        description: 'Cluster types (comma separated list, e.g. OpenSearch,ElasticSearch)'
        required: true
        type: string
        default: OpenSearch
      benchmark_type:
        description: 'Benchmark type'
        required: true
        type: string
        default: dev
      es_versions:
        description: 'Elasticsearch versions (comma separated)'
        required: false
        type: string
        default: '8.15.4'
      os_versions:
        description: 'OpenSearch versions (comma separated)'
        required: false
        type: string
        default: '2.16.0,2.17.1,2.18.0'
      aws_region:
        description: 'AWS region'
        required: false
        type: string
        default: eu-north-1
      snapshot_version:
        description: 'Snapshot version (`new` or `latest`)'
        required: false
        type: string
        default: 'latest'
      include_tasks:
        description: 'Comma-separated list of tasks to include'
        required: false
        type: string
        default: ''
      vpc:
        description: 'AWS VPC options: vpc_id,vpc_subnet_id,vpc_gateway_id,vpc_route_table_id,security_group_id'
        required: true
        type: string

env:
  # nightly run default parameters
  WORKLOADS: ${{ inputs.workloads || 'big5,pmc,noaa,nyc_taxis,vectorsearch,noaa_semantic_search' }}
  WORKLOAD_PARAMS: ${{ inputs.workload_params || '{}' }}
  CLUSTER_TYPES: ${{ inputs.cluster_types || 'OpenSearch,ElasticSearch' }}
  OS_VERSIONS: ${{ inputs.os_versions || '2.16.0,2.17.1,2.18.0' }}
  ES_VERSIONS: ${{ inputs.es_versions || '8.15.4' }}
  BENCHMARK_TYPE: ${{ inputs.benchmark_type ||  'official' }}

jobs:
  # Because the number of inputs is limited to 10
  # https://docs.github.com/en/enterprise-cloud@latest/actions/writing-workflows/workflow-syntax-for-github-actions#onworkflow_dispatchinputs
  split-inputs:
    runs-on: ubuntu-latest
    outputs:
      vpc_id: ${{ steps.split.outputs.vpc_id }}
      vpc_subnet_id: ${{ steps.split.outputs.vpc_subnet_id }}
      vpc_gateway_id: ${{ steps.split.outputs.vpc_gateway_id }}
      vpc_route_table_id: ${{ steps.split.outputs.vpc_route_table_id }}
      security_group_id: ${{ steps.split.outputs.security_group_id }}
    steps:
      - name: Split combined input
        id: split
        run: |
          # Read the combined input
          combined="${{ github.event.inputs.vpc }}"
          
          # Split the input into variables
          IFS=',' read -r vpc_id vpc_subnet_id vpc_gateway_id vpc_route_table_id security_group_id <<< "$combined"

          # Set them as outputs
          echo "vpc_id=$vpc_id" >> $GITHUB_OUTPUT
          echo "vpc_subnet_id=$vpc_subnet_id" >> $GITHUB_OUTPUT
          echo "vpc_gateway_id=$vpc_gateway_id" >> $GITHUB_OUTPUT
          echo "vpc_route_table_id=$vpc_route_table_id" >> $GITHUB_OUTPUT
          echo "security_group_id=$security_group_id" >> $GITHUB_OUTPUT

  generate-matrix:
    runs-on: [self-hosted, standard, ubuntu-latest-micro]
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        run: |
          res=$(python3 .github/generate-matrix.py "$WORKLOADS" "$WORKLOAD_PARAMS" "$CLUSTER_TYPES" "$OS_VERSIONS" "$ES_VERSIONS" "$BENCHMARK_TYPE")
          echo "matrix=$res" >> $GITHUB_OUTPUT
          echo "$res"

  run-benchmarks:
    needs: 
      - generate-matrix
      - split-inputs
    strategy:
      fail-fast: false
      max-parallel: 12
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}

    uses: ./.github/workflows/benchmark.yml
    with:
      name: ${{ matrix.name }}
      cluster_type: ${{ matrix.cluster_type}}
      workload: ${{ matrix.workload }}
      workload_params: ${{ matrix.workload_params }}
      benchmark_type: ${{ matrix.benchmark_type }}
      perform_benchmark: true
      test_procedure: ${{ matrix.test_procedure }}
      es_version: ${{ matrix.es_version }}
      os_version: ${{ matrix.os_version }}
      aws_region: ${{ inputs.aws_region || 'ca-central-1' }}
      # assumes the possible events are schedule or workflow_dispatch
      ci_tag: ${{ github.event_name == 'schedule' && 'scheduled' || 'manual' }}
      snapshot_version: ${{ inputs.snapshot_version }}
      include_tasks: ${{ inputs.include_tasks }}
      vpc_id: ${{ needs.split-inputs.outputs.vpc_id }}
      vpc_subnet_id: ${{ needs.split-inputs.outputs.vpc_subnet_id }}
      vpc_gateway_id: ${{ needs.split-inputs.outputs.vpc_gateway_id }}
      vpc_route_table_id: ${{ needs.split-inputs.outputs.vpc_route_table_id }}
      security_group_id: ${{ needs.split-inputs.outputs.security_group_id }}
    secrets:
      SNAPSHOT_AWS_ACCESS_KEY_ID: ${{ secrets.SNAPSHOT_AWS_ACCESS_KEY_ID }}
      SNAPSHOT_AWS_SECRET_ACCESS_KEY: ${{ secrets.SNAPSHOT_AWS_SECRET_ACCESS_KEY }}
      DATASTORE_HOST: ${{ vars.DATASTORE_HOST }}
      DATASTORE_USERNAME: ${{ secrets.DATASTORE_USERNAME }}
      DATASTORE_PASSWORD: ${{ secrets.DATASTORE_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
