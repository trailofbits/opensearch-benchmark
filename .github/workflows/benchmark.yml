---
name: OSB-Benchmark

on:
  workflow_call:
    inputs:
      name:
        description: 'Name of the workflow to run'
        required: true
        type: string
      workload:
        description: 'Workload to run'
        required: true
        type: string
        default: big5
      workload_params:
        description: 'Workload parameters'
        required: true
        type: string
        default: '{"number_of_replicas":0,"bulk_indexing_clients":1,"target_throughput":0}'
      cluster_type:
        description: 'Cluster type'
        required: true
        type: string
        default: OpenSearch
      benchmark_type:
        description: 'Benchmark type'
        required: false
        type: string
        default: dev
      perform_benchmark:
        description: 'Perform benchmark'
        required: true
        type: boolean
        default: true
      create_snapshot:
        description: 'Ingest data / Create snapshot'
        required: false
        type: boolean
        default: false
      force_snapshot:
        description: 'Force snapshot creation (delete existing snapshot)'
        required: false
        type: boolean
        default: false
      test_procedure:
        description: 'Test procedure'
        required: false
        type: string
        default: ''
      es_version:
        description: 'Elasticsearch version'
        required: false
        type: string
        default: 8.15.4
      os_version:
        description: 'OpenSearch version'
        required: false
        type: string
        default: 2.18.0
      aws_region:
        description: 'AWS region'
        required: true
        type: string
      ci_tag:
        description: 'Tag describing CI run'
        required: true
        type: string
      snapshot_version:
        description: 'Snapshot version (`new` or `latest`)'
        required: false
        type: string
        default: 'latest'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      SNAPSHOT_AWS_ACCESS_KEY_ID:
        required: true
      SNAPSHOT_AWS_SECRET_ACCESS_KEY:
        required: true
      DATASTORE_HOST:
        required: true
      DATASTORE_USERNAME:
        required: true
      DATASTORE_PASSWORD:
        required: true
      SLACK_BOT_TOKEN:
        required: false
      SLACK_CHANNEL_ID:
        required: false

env:
  TF_VAR_snapshot_user_aws_access_key_id: ${{ secrets.SNAPSHOT_AWS_ACCESS_KEY_ID }}
  TF_VAR_snapshot_user_aws_secret_access_key: ${{ secrets.SNAPSHOT_AWS_SECRET_ACCESS_KEY }}
  TF_VAR_datastore_host: ${{ secrets.DATASTORE_HOST }}
  TF_VAR_datastore_username: ${{ secrets.DATASTORE_USERNAME }}
  TF_VAR_datastore_password: ${{ secrets.DATASTORE_PASSWORD }}
  TF_VAR_aws_region: ${{ inputs.aws_region }}
  TF_VAR_aws_subnet_zone: ${{ inputs.aws_region }}a
  TF_VAR_target_cluster_type: ${{ inputs.cluster_type}}
  TF_VAR_prefix_list_id: pl-06f77c0b59dbf70fe
  TF_VAR_workload: ${{ inputs.workload}}
  TF_VAR_workload_params: ${{ inputs.workload_params }}
  TF_VAR_test_procedure: ${{ inputs.test_procedure }}
  TF_VAR_es_version: ${{ inputs.es_version }}
  TF_VAR_os_version: ${{ inputs.os_version }}
  TF_VAR_distribution_version: ${{ inputs.os_version }}
  TF_VAR_snapshot_version: ${{ inputs.snapshot_version }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SSH_OPTIONS: -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=10

jobs:
  prepare_workspace:
    runs-on: [self-hosted, standard, ubuntu-latest-micro]
    outputs:
      workspace_name: ${{ steps.workspace.outputs.workspace_name }}
      now: ${{ steps.now.outputs.now }}
      now_run_group_id: ${{ steps.now.outputs.now_run_group_id }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: hashicorp/setup-terraform@v3
      - name: Install AWS CLI
        continue-on-error: true
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
      - name: Terraform setup
        working-directory: infra
        run: terraform init
      - name: Compute Terraform workspace name from workload/workload_params/cluster_type
        id: workspace
        run: |
            echo "workspace_name=$(echo ${{ github.run_id }}-${{ inputs.workload }}-${{ inputs.workload_params }}-${{ inputs.cluster_type }}-${{ inputs.test_procedure }}-${{ inputs.os_version}}-${{ inputs.es_version }} | md5sum | head -c 8)" >> $GITHUB_OUTPUT
      - name: Switch Terraform workspace
        working-directory: infra
        run: terraform workspace new gh-nightly-${{ steps.workspace.outputs.workspace_name }}
      - name: Get current time
        id: now
        run: |
          echo "now=$(date +%s)" >> $GITHUB_OUTPUT
          echo "now_run_group_id=$(date '+%Y_%m_%d_%H_%M_%S')" >> $GITHUB_OUTPUT
      - name: Create benchmark environment
        working-directory: infra
        run: terraform apply -auto-approve
        env:
            TF_VAR_benchmark_environment: gh-nightly-${{ steps.now.outputs.now }}
      - name: Try to delete immediately the benchmark environment
        working-directory: infra
        if: ${{ failure() }}
        run: terraform destroy -auto-approve
        env:
            TF_VAR_benchmark_environment: gh-nightly-${{ steps.now.outputs.now }}
      - name: List files
        run: ls -lah && ls -lah infra && pwd
      - name: Upload SSH key artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssh-key-${{ steps.workspace.outputs.workspace_name }}
          path: ${{ github.workspace }}/infra/private_key-gh-nightly-${{ steps.workspace.outputs.workspace_name }}.pem
      - name: Upload Terraform state artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state-${{ steps.workspace.outputs.workspace_name }}
          path: ${{ github.workspace }}/infra/terraform.tfstate.d/
      - name: Upload terraform dir
        uses: actions/upload-artifact@v4
        with:
          name: terraform-dir-${{ steps.workspace.outputs.workspace_name }}
          path: ${{ github.workspace }}/infra/.terraform/
          include-hidden-files: true
      - name: Upload terraform lock file
        uses: actions/upload-artifact@v4
        with:
          name: terraform-lock-${{ steps.workspace.outputs.workspace_name }}
          path: ${{ github.workspace }}/infra/.terraform.lock.hcl
          include-hidden-files: true

  ingest-data:
    needs: prepare_workspace
    runs-on: [self-hosted, standard, ubuntu-latest-micro]
    # slowest vectorsearch cohere-10m ingests took >1000 minutes
    timeout-minutes: 1200
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: hashicorp/setup-terraform@v3
      - name: Install AWS CLI
        continue-on-error: true
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
      - name: Terraform setup
        working-directory: infra
        run: terraform init
      - name: Download SSH key artifact
        uses: actions/download-artifact@v4
        with:
          name: ssh-key-${{ needs.prepare_workspace.outputs.workspace_name }}
          path: ssh-key-${{ needs.prepare_workspace.outputs.workspace_name }}
      - name: Download Terraform state artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-state-${{ needs.prepare_workspace.outputs.workspace_name }}
          path: terraform-state-${{ needs.prepare_workspace.outputs.workspace_name }}
      - name: Download terraform dir
        uses: actions/download-artifact@v4
        with:
          name: terraform-dir-${{ needs.prepare_workspace.outputs.workspace_name }}
          path: terraform-dir-${{ needs.prepare_workspace.outputs.workspace_name }}
      - name: Download terraform lock file
        uses: actions/download-artifact@v4
        with:
          name: terraform-lock-${{ needs.prepare_workspace.outputs.workspace_name }}
          path: terraform-lock-${{ needs.prepare_workspace.outputs.workspace_name }}
      - name: Set up SSH keys
        run: |
          cp ssh-key-${{ needs.prepare_workspace.outputs.workspace_name }}/private_key-gh-nightly-${{ needs.prepare_workspace.outputs.workspace_name }}.pem infra/
          chmod 600 ./infra/private_key-gh-nightly-${{ needs.prepare_workspace.outputs.workspace_name }}.pem
      - name: Set up Terraform state
        run: |
          mkdir -p infra/terraform.tfstate.d
          cp -rv terraform-state-${{ needs.prepare_workspace.outputs.workspace_name }}/* infra/terraform.tfstate.d/
      - name: Set up Terraform files
        run: |
          mkdir -p infra/.terraform
          cp -rv terraform-dir-${{ needs.prepare_workspace.outputs.workspace_name }}/* infra/.terraform/
          cp terraform-lock-${{ needs.prepare_workspace.outputs.workspace_name }}/.terraform.lock.hcl infra/.terraform.lock.hcl
      - name: Switch Terraform workspace
        working-directory: infra
        run: terraform workspace select gh-nightly-${{ needs.prepare_workspace.outputs.workspace_name }}

      - name: Restore snapshot
        working-directory: infra
        id: restoresnapshot
        if: ${{ inputs.perform_benchmark && !inputs.create_snapshot }}
        continue-on-error: true
        run: |
            ssh -i $(terraform output -raw ssh_private_key_file) $SSH_OPTIONS \
              -tt ubuntu@$(terraform output -raw load-generation-ip) -- \
              "set -x; bash -ixc 'bash -ix /mnt/restore_snapshot.sh;'"

      - name: Ingest data / Create snapshot
        working-directory: infra
        if: ${{ inputs.create_snapshot || steps.restoresnapshot.outcome == 'failure' }}
        run: |
            ssh -i $(terraform output -raw ssh_private_key_file) $SSH_OPTIONS \
              -tt ubuntu@$(terraform output -raw load-generation-ip) -- \
              "set -x; bash -ixc \"FORCE_INGESTION=$FORCE_INGESTION EXTRA_CLIENT_OPTIONS=timeout:240 CI_TAG=$CI_TAG bash -ix /mnt/ingest.sh;\""
        env:
            FORCE_INGESTION: ${{ inputs.force_snapshot && 'true' || '' }}
            CI_TAG: ${{ inputs.ci_tag }}

  run-osb:
    needs: [prepare_workspace, ingest-data]
    runs-on: [self-hosted, standard, ubuntu-latest-micro]
    if: ${{ inputs.perform_benchmark && needs.ingest-data.result == 'success' }}
    name: run-osb-${{ needs.prepare_workspace.outputs.now_run_group_id }}
    # Almost 17h; the longest benchmark (big5 on OS) should take ~15h
    timeout-minutes: 1000

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: hashicorp/setup-terraform@v3
      - name: Install AWS CLI
        continue-on-error: true
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
      - name: Terraform setup
        working-directory: infra
        run: terraform init
      - name: Download SSH key artifact
        uses: actions/download-artifact@v4
        with:
          name: ssh-key-${{ needs.prepare_workspace.outputs.workspace_name }}
          path: ssh-key-${{ needs.prepare_workspace.outputs.workspace_name }}
      - name: Download Terraform state artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-state-${{ needs.prepare_workspace.outputs.workspace_name }}
          path: terraform-state-${{ needs.prepare_workspace.outputs.workspace_name }}
      - name: Download terraform dir
        uses: actions/download-artifact@v4
        with:
          name: terraform-dir-${{ needs.prepare_workspace.outputs.workspace_name }}
          path: terraform-dir-${{ needs.prepare_workspace.outputs.workspace_name }}
      - name: Download terraform lock file
        uses: actions/download-artifact@v4
        with:
          name: terraform-lock-${{ needs.prepare_workspace.outputs.workspace_name }}
          path: terraform-lock-${{ needs.prepare_workspace.outputs.workspace_name }}
      - name: Set up SSH keys
        run: |
          cp ssh-key-${{ needs.prepare_workspace.outputs.workspace_name }}/private_key-gh-nightly-${{ needs.prepare_workspace.outputs.workspace_name }}.pem infra/
          chmod 600 ./infra/private_key-gh-nightly-${{ needs.prepare_workspace.outputs.workspace_name }}.pem
      - name: Set up Terraform state
        run: |
          mkdir -p infra/terraform.tfstate.d
          cp -rv terraform-state-${{ needs.prepare_workspace.outputs.workspace_name }}/* infra/terraform.tfstate.d/
      - name: Set up Terraform files
        run: |
          mkdir -p infra/.terraform
          cp -rv terraform-dir-${{ needs.prepare_workspace.outputs.workspace_name }}/* infra/.terraform/
          cp terraform-lock-${{ needs.prepare_workspace.outputs.workspace_name }}/.terraform.lock.hcl infra/.terraform.lock.hcl
      - name: Switch Terraform workspace
        working-directory: infra
        run: terraform workspace select gh-nightly-${{ needs.prepare_workspace.outputs.workspace_name }}

      - name: Run benchmark
        working-directory: infra
        if: ${{ inputs.perform_benchmark }}
        run: |
            ssh -i $(terraform output -raw ssh_private_key_file) $SSH_OPTIONS \
              -tt ubuntu@$(terraform output -raw load-generation-ip) -- \
              "EXTRA_CLIENT_OPTIONS=timeout:240 RUN_GROUP_ID=$RUN_GROUP_ID CI_TAG=$CI_TAG bash -i /mnt/benchmark.sh $BENCHMARK_TYPE"
        env:
            BENCHMARK_TYPE: ${{ inputs.benchmark_type }}
            RUN_GROUP_ID: ${{ needs.prepare_workspace.outputs.now_run_group_id }}
            CI_TAG: ${{ inputs.ci_tag }}

  destroy_workspace:
    needs: [prepare_workspace, run-osb, ingest-data]
    runs-on: [self-hosted, standard, ubuntu-latest-micro]
    if: ${{ always() }}
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: hashicorp/setup-terraform@v3
      - name: Install AWS CLI
        continue-on-error: true
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
      - name: Terraform setup
        working-directory: infra
        run: terraform init
      - name: Download SSH key artifact
        uses: actions/download-artifact@v4
        with:
          name: ssh-key-${{ needs.prepare_workspace.outputs.workspace_name }}
          path: ssh-key-${{ needs.prepare_workspace.outputs.workspace_name }}
      - name: Download Terraform state artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-state-${{ needs.prepare_workspace.outputs.workspace_name }}
          path: terraform-state-${{ needs.prepare_workspace.outputs.workspace_name }}
      - name: Download terraform dir
        uses: actions/download-artifact@v4
        with:
          name: terraform-dir-${{ needs.prepare_workspace.outputs.workspace_name }}
          path: terraform-dir-${{ needs.prepare_workspace.outputs.workspace_name }}
      - name: Download terraform lock file
        uses: actions/download-artifact@v4
        with:
          name: terraform-lock-${{ needs.prepare_workspace.outputs.workspace_name }}
          path: terraform-lock-${{ needs.prepare_workspace.outputs.workspace_name }}
      - name: Set up SSH keys
        run: |
          cp ssh-key-${{ needs.prepare_workspace.outputs.workspace_name }}/private_key-gh-nightly-${{ needs.prepare_workspace.outputs.workspace_name }}.pem infra/
          chmod 600 ./infra/private_key-gh-nightly-${{ needs.prepare_workspace.outputs.workspace_name }}.pem
      - name: Set up Terraform state
        run: |
          mkdir -p infra/terraform.tfstate.d
          cp -rv terraform-state-${{ needs.prepare_workspace.outputs.workspace_name }}/* infra/terraform.tfstate.d/
      - name: Set up Terraform files
        run: |
          mkdir -p infra/.terraform
          cp -rv terraform-dir-${{ needs.prepare_workspace.outputs.workspace_name }}/* infra/.terraform/
          cp terraform-lock-${{ needs.prepare_workspace.outputs.workspace_name }}/.terraform.lock.hcl infra/.terraform.lock.hcl
      - name: Switch Terraform workspace
        working-directory: infra
        run: terraform workspace select gh-nightly-${{ needs.prepare_workspace.outputs.workspace_name }}

      - name: Download target-cluster log (OS)
        if: inputs.cluster_type == 'OpenSearch'
        working-directory: infra
        continue-on-error: true
        run: |
            scp -i $(terraform output -raw ssh_private_key_file) $SSH_OPTIONS \
              ubuntu@$(terraform output -raw target-cluster-ip):/mnt/opensearch.log ./target-cluster.log
      - name: Download target-cluster log (ES)
        if: inputs.cluster_type == 'ElasticSearch'
        working-directory: infra
        continue-on-error: true
        run: |
            mkdir target-cluster.log
            scp -i $(terraform output -raw ssh_private_key_file) $SSH_OPTIONS \
              -r ubuntu@$(terraform output -raw target-cluster-ip):/mnt/logs ./target-cluster.log/
      - name: Download osb log
        working-directory: infra
        continue-on-error: true
        run: |
            scp -i $(terraform output -raw ssh_private_key_file) $SSH_OPTIONS \
              ubuntu@$(terraform output -raw load-generation-ip):/mnt/.benchmark/logs/benchmark.log ./osb.log
      - name: Upload target-cluster log
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: target-cluster-${{ needs.prepare_workspace.outputs.workspace_name }}.log
          path: ${{ github.workspace }}/infra/target-cluster.log
      - name: Upload osb log
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: osb-${{ needs.prepare_workspace.outputs.workspace_name }}.log
          path: ${{ github.workspace }}/infra/osb.log

      - name: Destroy benchmark environment
        working-directory: infra
        run: terraform destroy -auto-approve
        env:
            TF_VAR_benchmark_environment: gh-nightly-${{ needs.prepare_workspace.outputs.now }}

  clean_up_on_error:
    needs: [prepare_workspace]
    runs-on: ubuntu-latest

    if: ${{ failure() || cancelled() }}
    
    steps:
      - name: Install AWS CLI
        continue-on-error: true
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"

          unzip awscliv2.zip
          sudo ./aws/install

      - name: Deleting the SSH key pair
        run: |
          aws \
            ec2 delete-key-pair \
            --region ${TF_VAR_aws_region} \
            --key-name gh-nightly-${{ needs.prepare_workspace.outputs.workspace_name }}

  check_slack_token:
      runs-on: ubuntu-latest
      outputs:
        do_notify_slack: ${{ steps.init.outputs.do_notify_slack }}
      steps:
        - name: Environment variables to output
          id: init
          run: |
            # Set the output variable to "true" if the secret exists
            echo "do_notify_slack=${{ secrets.SLACK_BOT_TOKEN != '' && 'true' || 'false' }}" >> $GITHUB_OUTPUT

  notify_slack:
    needs: [prepare_workspace, run-osb, check_slack_token]
    runs-on: ubuntu-latest
    if: needs.check_slack_token.outputs.do_notify_slack == 'true' && (failure() || cancelled()) && github.ref == 'refs/heads/main'
    steps:
      - name: Slack Report
        uses: slackapi/slack-github-action@6c661ce58804a1a20f6dc5fbee7f0381b469e001 #v1.25.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: |
            *Failed to run Benchmark Workflow*
            _Workflow:_ ${{ github.workflow }}
            _Run ID:_ ${{ github.run_id }}
            _Run Number:_ ${{ github.run_number }}
            _Workload:_ ${{ inputs.workload }}
            _Workload Params:_ ${{ inputs.workload_params }}
            _Cluster Type:_ ${{ inputs.cluster_type }}
            _Benchmark Type:_ ${{ inputs.benchmark_type }}
            _Perform Benchmark:_ ${{ inputs.perform_benchmark }}
            _Create Snapshot:_ ${{ inputs.create_snapshot }}
            _Force Snapshot:_ ${{ inputs.force_snapshot }}
            _Test Procedure:_ ${{ inputs.test_procedure }}
            _ES Version:_ ${{ inputs.es_version }}
            _OS Version:_ ${{ inputs.os_version }}
            _AWS Region:_ ${{ inputs.aws_region }}
            _CI Tag:_ ${{ inputs.ci_tag }}
        
